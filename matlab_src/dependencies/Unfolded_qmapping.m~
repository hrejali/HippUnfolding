    
%% choose from available mo
[~,qfilenames] = system(['ls ' quantitative_dir '/' sub '/anat']);
qfilenames = strsplit(qfilenames)';
i = strfind(qfilenames, '.nii');
i = find(cellfun('isempty', i));
qfilenames(i) = [];

p1 = strfind(qfilenames, 'T1map');
p1 = find(~cellfun('isempty', p1));
p2 = strfind(qfilenames, 'T1w');
p2 = find(~cellfun('isempty', p2));
p3 = strfind(qfilenames, 'T2w');
p3 = find(~cellfun('isempty', p3));

if ~isempty(p1) %load first T1map available
    map = load_nii([quantitative_dir '/' sub '/anat/' qfilenames{p1(1)}]);
    map = map.img; 
    mapModality = 'T1map';
elseif ~isempty(p2) && ~isempty(p3) %T1w/T2w
    map1 = load_nii([quantitative_dir '/' sub '/anat/' qfilenames{p2(1)}]);
    map2 = load_nii([quantitative_dir '/' sub '/anat/' qfilenames{p3(1)}]);
    map = map1.img./map2.img; clear map1 map2
    mapModality = 'T1w/T2w';
elseif ~isempty(p3) %just take T1w
    map = load_nii([quantitative_dir '/' sub '/anat/' qfilenames{p2(1)}]);
    map = map.img;
    mapModality = 'T1w';
end



% load and fix bad indices (due to UVWtoXYZ_interpolant)
load(sprintf('BIDSscripts/UVWtoXYZ_interpolant/FV_hemi-%s_Isovolume_IO.mat',LR));
origHist = load_nii(sprintf('BIDS_40um/sourcedata/sub-bbhist/anat/sub-bbhist_hemi-L.nii.gz',LR));
bad = find(any(isnan(Vxyz),2));
Vxyz(bad,:) = 1;
Vxyz = round(Vxyz);
inds = sub2ind(sz, Vxyz(:,1),Vxyz(:,2),Vxyz(:,3));
hist = origHist.img(inds);
hist(bad) = nan;
hist = reshape(hist,[(APres+1),(PDres+1),(IOres+1)]);
hist = inpaintn(hist); % this should be done in 3D
hist = reshape(hist,[(APres+1)*(PDres+1),(IOres+1)]);

% get profile features
nlamfeats = 10;
laminarFeatrues = nan([(APres+1),(PDres+1),nlamfeats]);
laminarFeatrues(:,:,1) = reshape(mean(hist,2),[APres+1,PDres+1]);
for n = 2:5
    laminarFeatrues(:,:,n) = reshape(moment(hist,n,2),[APres+1,PDres+1]);
end
hist = abs(diff(hist,1,2));
laminarFeatrues(:,:,6) = reshape(mean(hist,2),[APres+1,PDres+1]);
for n = 2:5
    laminarFeatrues(:,:,n+5) = reshape(moment(hist,n,2),[APres+1,PDres+1]);
end

% image process
for f = 1:size(laminarFeatrues,3)
    tmp = (laminarFeatrues(:,:,f));
    tmp(isoutlier(tmp(:),'mean')) = nan;
    tmp = inpaintn(tmp);
    tmp = imfilter(tmp,kernel(:,:,1),'symmetric'); % only use first smoothing kernel
    laminarFeatrues(:,:,f) = tmp;
end